-- HackerRank SQL Problems

-- This file contains my solutions to various SQL problems from HackerRank.

-- Problem 1: Higher than 75 marks (easy)
-- Query the Name of any student in STUDENTS who scored higher than  Marks. 
-- Order your output by the last three characters of each name. 
-- If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
-- Solution:
SELECT Name
FROM STUDENTS
WHERE Marks > 75
ORDER BY RIGHT(Name, 3), ID asc;

-- Problem 2: Weather Observation Station 3
-- Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.
SELECT DISTINCT CITY
FROM STATION
WHERE ID / 2 * 2 = ID; -- using this equation, by dividing and multiplying by 2 integer, odd numbers wouldnt equal, if they are equal, it is even

-- Problem 3: Weather Observation Station 4
-- Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
SELECT (SELECT COUNT(CITY) FROM STATION)
        - (SELECT COUNT(DISTINCT CITY) FROM STATION) AS difference;

-- Problem 4: Weather Observation Station 5
-- Query the two cities in STATION with the shortest and longest CITY names,
-- as well as their respective lengths (i.e.: number of characters in the name). 
-- If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
-- Solution:
-- Query to find the city with the shortest name
WITH shortest_city AS (
    SELECT CITY, LENGTH(CITY) AS city_length
    FROM STATION
    ORDER BY LENGTH(CITY) ASC, CITY ASC
    LIMIT 1
),
-- Query to find the city with the longest name
longest_city AS (
    SELECT CITY, LENGTH(CITY) AS city_length
    FROM STATION
    ORDER BY LENGTH(CITY) DESC, CITY ASC
    LIMIT 1
)
-- Combining results from both queries
SELECT CITY, city_length
FROM shortest_city
UNION ALL
SELECT CITY, city_length
FROM longest_city;

-- Problem 5: Weather Observation Station 6
-- Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.
SELECT DISTINCT CITY
FROM STATION
WHERE CITY LIKE 'A%' OR CITY LIKE 'E%' OR CITY LIKE 'I%' OR CITY LIKE 'O%' OR CITY LIKE 'U%';

-- Problem 6: Weather Observation Station 7
-- Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
SELECT DISTINCT CITY
FROM STATION
WHERE CITY LIKE '%A' OR CITY LIKE '%E' OR CITY LIKE '%I' OR CITY LIKE '%O' OR CITY LIKE '%U';

--Problem 7: Weather Observation Station 8
-- Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.
SELECT DISTINCT CITY
FROM STATION
WHERE (CITY LIKE '%A' OR CITY LIKE '%E' OR CITY LIKE '%I' OR CITY LIKE '%O' OR CITY LIKE '%U')
AND (CITY LIKE 'A%' OR CITY LIKE 'E%' OR CITY LIKE 'I%' OR CITY LIKE 'O%' OR CITY LIKE 'U%');

-- Problem 8: Weather Observation Station 9
-- Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
SELECT DISTINCT CITY 
FROM STATION
WHERE CITY NOT LIKE 'A%' AND 
    CITY NOT LIKE 'E%' AND
    CITY NOT LIKE 'I%' AND
    CITY NOT LIKE 'O%' AND
    CITY NOT LIKE 'U%';

-- Problem 9: Type of Triangle
-- Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:
-- Equilateral: It's a triangle with  sides of equal length.
-- Isosceles: It's a triangle with  sides of equal length.
-- Scalene: It's a triangle with  sides of differing lengths.
-- Not A Triangle: The given values of A, B, and C don't form a triangle.
SELECT 
    CASE 
        -- Check for Equilateral
        WHEN A = B AND B = C AND A + B > C THEN 'Equilateral'
        
        -- Check for Isosceles
        WHEN (A = B OR A = C OR B = C) AND A + B > C AND A + C > B AND B + C > A THEN 'Isosceles'
        
        -- Check for Scalene
        WHEN A <> B AND A <> C AND B <> C AND A + B > C AND A + C > B AND B + C > A THEN 'Scalene'
        
        -- If none of the above, it's not a valid triangle
        ELSE 'Not A Triangle'
    END AS Type
FROM TRIANGLES;






