/* 
This project features a relational database designed to manage both customer support and music cataloging 
operations. It integrates employee management, customer relationships, transaction tracking, and a music library, along with dynamic 
playlist management functionality. The database supports multiple business use cases, including customer service workflows, 
music discovery, and playlist creation.
*/

-- 

-- Show Customers (their full names, customer ID, and country) who are not in the US. 
SELECT FirstName, LastName, CustomerId, Country 
FROM chinook.customers 
WHERE Country != "USA";


-- Show only the Customers from USA.
SELECT * FROM chinook.customers 
WHERE Country = "USA";


-- Find the Invoices of customers who are from USA. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country.
SELECT cust.FirstName, cust.LastName, invoices.InvoiceId, invoices.InvoiceDate, invoices.BillingCountry
FROM chinook.customers AS cust

LEFT JOIN chinook.invoices AS invoices
ON cust.CustomerID = invoices.CustomerId

WHERE invoices.BillingCountry = "USA";


-- Show the Employees who are Sales Agents.
SELECT * FROM chinook.employees
WHERE Title = "Sales Support Agent" ;


-- Find a unique/distinct list of billing countries from the Invoice table.
SELECT DISTINCT BillingCountry 
FROM chinook.Invoices ;


-- Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name.
SELECT emp.FirstName, emp.LastName, invoices.InvoiceId
FROM chinook.employees AS emp

JOIN chinook.customers AS cust 
ON cust.SupportRepId = emp.EmployeeId
JOIN chinook.invoices AS invoices
ON invoices.CustomerId = cust.CustomerID;


-- Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.
SELECT emp.LastName, emp.Firstname, cust.FirstName, cust.LastName, cust.Country, invoices.total
FROM chinook.employees AS emp 

JOIN chinook.customers AS cust 
ON cust.SupportRepId = emp.EmployeeId
JOIN chinook.invoices AS invoices 
ON invoices.CustomerId = cust.CustomerId;


-- How many Invoices were there in 2009?
SELECT COUNT(*)
FROM chinook.invoices
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';


-- What are the total sales for 2009?
SELECT SUM(Total)
FROM chinook.invoices
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';


-- Write a query that includes the purchased track name with each invoice line ID.
SELECT t.Name, i.InvoiceLineId
FROM chinook.invoice_items AS i
JOIN chinook.tracks AS t 
ON i.TrackId = t.TrackId;


-- Write a query that includes the purchased track name AND artist name with each invoice line ID.
SELECT t.Name AS 'Track Name', art.Name AS 'Artist Name', i.InvoiceId
FROM chinook.tracks AS t

JOIN chinook.albums AS alb
ON alb.AlbumID = t.AlbumID
JOIN chinook.artists AS art
ON art.ArtistID = alb.ArtistID
JOIN chinook.invoice_items AS i
ON i.TrackID = t.TrackID;


-- Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.
SELECT t.name AS 'Track Name', a.title AS 'Album Name', m.name AS 'Media Type', g.name AS 'Genre'
FROM chinook.tracks AS t

JOIN chinook.albums AS a
ON a.AlbumId = t.AlbumId
JOIN chinook.media_types AS m
ON m.MediaTypeId = t.MediaTypeId
JOIN chinook.genres AS g
ON g.GenreId = t.GenreId;


-- Show the total sales made by each sales agent.
SELECT emp.FirstName, emp.LastName, ROUND(SUM(inv.Total), 2) as 'Total Sales' 
FROM chinook.employees AS emp

JOIN chinook.customers AS cust 
ON cust.SupportRepId = emp.EmployeeId

JOIN chinook.invoices AS inv 
ON inv.CustomerId = cust.CustomerId

WHERE emp.Title = 'Sales Support Agent' 
GROUP BY emp.FirstName;


-- Which sales agent made the most dollars in sales in 2009?
SELECT emp.FirstName, emp.LastName, ROUND(SUM(inv.Total), 2) as 'Total Sales' 
FROM chinook.employees AS emp

JOIN chinook.customers AS cust 
ON cust.SupportRepId = emp.EmployeeId

JOIN chinook.invoices AS inv 
ON inv.CustomerId = cust.CustomerId

WHERE emp.Title = 'Sales Support Agent' 
AND inv.InvoiceDate LIKE '2009%' 
GROUP BY emp.FirstName
ORDER BY (round(sum(Inv.Total), 2))  DESC LIMIT 1;
